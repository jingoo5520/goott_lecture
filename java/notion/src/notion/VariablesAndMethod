변수와 메서드

변수종류/선언위치/생성/소멸/용도
클래스 변수(static)/클래스 내부/프로그램의 시작과 동시에 생성/프로그램 종료시 소멸/
인스턴스 변수/클래스 내부/객체가 생성될 때 생성/객체가 소멸될 때 소멸/
지역 변수/메서드 생성자, 초기화 블럭 내부/블럭에서 변수가 선언되었을 때/블럭이 끝나면

class Variables {
	int iv; // 인스턴스 변수
	static int sv;  // 클래스 변수
}

## 메서드 생성법

[접근제한자] [static] 반환값|void 메서드이름 ([매개변수타입 매개변수이름]){
	method body
	[return 반환값;]
}

1. 접근 제한자(access modifier): 생성된 메서드가 호출될 수 있는 범위 지정
	public > protected > default(생략시) > private
2. static: 프로그램이 실행될 때 메모리에 자동으로 생성되는 메서드
	클래스명.멤버변수명 | 클래스명.멤머메서드() 로 호출
	



## 메서드 오버로딩 기법

하나의 이름으로 시그니처가 다른 메서드를 정의하여 사용하는 기법

조건
- 같은 클래스 내에 있어야 함
- 메서드 이름 동일
- 메서드 시그니처(파라미터 순서, 타입, 개수)가 달라야 함



## 생성자

1. 생성자는 클래스 이름과 같아야 한다.
2. 생성자는 반환타입이 없다.

기본 생성자
- 매개변수가 없는 생성자
- 클래스에 생성자가 하나도 없다면 컴파일러가 기본 생성자들 자동으로 만들어준다.
- 생성자가 하나라도 있으면 기본 생성자를 만들지 않음.

## 생성자 장점

- 중복 호출 제거
- 제약

## 캡슐화(은닉화)

접근 제어자(access modifier)
1. public: 다른 패키지에서 모두 접근 가능
2. protected: 동일한 패키지나, 상속받은 클래스에서 접근 가능
3. default: 동일한 패키지 내에서만 접근 가능(default)
4. private: 동일한 클래스 내에서만 접근 가능

캡슐화 방법
- 멤버 변수는 private하게 접근 제어자를 설정
- private 한 멤머 변수에 접근할 수 있도록 getter, setter 메서드를 추가




제어자 
Final - 마지막의, 변경될 수 없는
final 클래스
변경될 수 없는 클래스, 
확장할 수 없는 클래스, 
다른 클래스의 조상이 될 수 없음

final 메서드
변경될 수 없는 메서드,
오버라이딩(메서드 재정의) 불가

final 멤버변수, 지역변수
값을 변경할 수 없는 상수가됨


